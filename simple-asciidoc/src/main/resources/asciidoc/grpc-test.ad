= ks-grpc 项目说明
余 发瑞 yufarui@yeah.net
:doctype: article
:encoding: utf-8
:lang: zh-cn
:toc: left
:toc-title: 导航目录
:toclevels: 4
:sectnums:
:sectanchors:

:hardbreaks:
:experimental:
:icons: font

pass:[<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">]

[preface]
== 前言

gitlab项目地址link:http://10.253.117.9/farui.yu/ks-grpc[ks-grpc]


[TIP]
====
使用前在钉钉@余发瑞 加入到项目中
====

== grpc解释

grpc 采用了 http2.0应用层协议,使用Protocol Buffer数据进行传输;

=== http2.0特点

====
二进制传输
****
HTTP2.0中所有加强性能的核心即是二进制传输.在HTTP1.x中，我们是通过文本的方式传输数据。基于文本的方式传输数据存在很多缺陷，文本的表现形式有多样性，因此要做到健壮性考虑的场景必然有很多，但是二进制则不同，只有0和1的组合，因此选择了二进制传输，实现方便且健壮。
在HTTP2.0中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码。
****

.http1.0与2.0区别
image::https://img2020.cnblogs.com/i-beta/990655/202003/990655-20200303205449811-53012679.png[区别,600,600]

****
为了保证HTTP不受影响，那就需要在应用层（HTTP2.0）和传输层（TCP or UDP）之间增加一个二进制分帧层。在二进制分帧层上，HTTP2.0会将所有传输的信息分为更小的消息和帧，并采用二进制格式编码，其中HTTP1.x的首部信息会被封装到Headers帧，而Request Body则封装到Data帧。
****
====

====
多路复用
****
在HTTP1.0中，因为浏览器限制了同一个域名下的请求数量，当页面需要请求很多资源的时候，队头阻塞（Head of line blocking）会导致在达到最大请求时，资源需要等待其他资源请求完成后才能继续发送。

HTTP2.0中，有两个概念非常重要：帧（frame）和流（stream）。

帧是最小的数据单位，每个帧会标识出该帧属于哪个流，流是多个帧组成的数据流。

所谓多路复用，即在一个TCP连接中存在多个流，即可以同时发送多个请求，在客户端，这些帧乱序发送，到对端后再根据每个帧首部的流标识符重新组装。通过该技术，可以避免HTTP旧版本的队头阻塞问题，极大提高传输性能。
****
image::https://img2020.cnblogs.com/i-beta/990655/202003/990655-20200303205517039-2049401796.png[多路复用,600,600]

====

=== Protocol Buffer

https://developers.google.com/protocol-buffers[官网地址]

.简单说明
****
protocol buffers 是google用于序列化结构化数据的 一种机制,但与语言和平台都无关并且可扩展的.类似与XML吧，但比之更小、更快、更简单。一旦你定义了数据的结构化方式，就可以使用特殊生成的源代码轻松地从各种数据流和使用各种语言编写和读取结构化数据。 
****

protocol buffers 适合于http2.0的原理详见
https://developers.google.com/protocol-buffers/docs/encoding[官网encoding章节]

=== GRPC

https://www.grpc.io/docs/[官网地址]

image::https://www.grpc.io/img/landing-2.svg[landing-2,600,600]

****
grpc 可以帮助我们对任意两种语言进行信息传输.其中传输的数据就是protocol buffer构成二进制数据流
****

[TIP]
====
在grpc官网中给出java代码的示例,并给了我们一些有用的jar包;帮助我们构建grpc协议传输;
====

== 项目说明

=== 项目结构
----
ks-grpc
|--ks-grpc-api
|--ks-grpc-client
|--ks-grpc-connection
|--ks-grpc-server
----

.说明
****
ks-grpc-api::
公共接口层,所有的protocol buffer 数据都定义在这个模块中,方便其他模块去引用;

ks-grpc-client::
grpc的客户端,用来发送grpc请求

ks-grpc-connection::
grpc协议转换层,将ks-grpc-client发送来的grpc请求转换成http1.1与json的形式发送到ks-grpc-server

ks-grpc-server::
标准的spring-boot微服务
****

=== 项目使用准备-consul

下载并安装consul
https://www.consul.io/[官网地址]

下载完毕后,执行命令启动consul

.windows启动命令
****
进入consul.exe所在目录
执行 ./consul.exe agent -dev
****


当然使用docker来安装最为方便

----
docker search consul

docker pull consul

docker run -d --name my-consul -p 8500:8500 consul
----

[NOTE]
====
目前因微服务项目使用的注册中心使用的是consul,故延用之
====

[TIP]
====
为了能使grpc的调用,能负载均衡和可控,所以引入服务注册中心
====

=== 项目使用准备-project

执行
----
mvn clean install
----

分别运行

----
|--ks-grpc-client
|--ks-grpc-connection
|--ks-grpc-server
----

在浏览器中 输入
----
http://localhost:9900/test
----

或者使用 curl
----
curl http://localhost:9900/test
----

其链路过程为

image::https://oscimg.oschina.net/oscnet/up-6a02dab3e9454c5965985704beb81e33ba2.png[ks-grpc,600,600]

当然你也可以直接运行
ks-grpc-client中GrpcSendService来验证

=== 代码说明

icon:tags[role="red"]定义合适的 protocol buffer

----
proto
|--reply.proto
|--request.proto
|--service.proto
----

====
.request.proto
[source,proto]
----
syntax = "proto3";

package proto.request;<1>

option java_multiple_files = true;
option java_package = "com.ksfintech.proto.request";<2>
option java_outer_classname = "RequestProto";

message HelloRequest {
  string name = 1;
}
----
<1> .proto中其对应包名
<2> 生成的.java文件,其对应的包名
====

====
.service.proto
[source,proto]
----
syntax = "proto3";

package proto.service;

import "request.proto";<1>
import "reply.proto";

option java_multiple_files = true;
option java_package = "com.ksfintech.proto.service";
option java_outer_classname = "ServiceProto";

service MyService {
  // Sends a greeting
  rpc SayHello (proto.request.HelloRequest) returns (proto.reply.HelloReply) {<2>
  }
}
----
<1> 引入其他.proto文件
<2> 使用.proto中包名 + message名称
====


icon:tags[role="red"] 定义合适的 client

其中client以及connection中所使用依赖为

[source,xml]
----
<dependency>
    <groupId>net.devh</groupId>
    <artifactId>grpc-spring-boot-starter</artifactId>
    <version>${grpc-spring-boot-starter}</version>
</dependency>
----

其官网地址link:https://yidongnan.github.io/grpc-spring-boot-starter/zh-CN[grpc-spring-boot-starter]

====
[source,java]
----
@Service
@Slf4j
public class GrpcClientService {

    @GrpcClient("ks-grpc-connection")<1>
    private MyServiceGrpc.MyServiceBlockingStub simpleStub;

    public String sendMessage(final String name) {

        HelloRequest helloRequest = HelloRequest.newBuilder()
                .setName(name)
                .build();
        try {
            final HelloReply response = this.simpleStub
                    .sayHello(helloRequest);<2>
            return response.getMessage();
        } catch (final StatusRuntimeException e) {
            log.error("grpc invoke fail", e);
            return "FAILED with " + e.getStatus().getCode().name();
        }
    }

}
----
<1> @grpcClient能帮助我们与ks-grpc-connection建立channel
<2> 通过blockingStub发送请求
====

icon:tags[role="red"] 定义合适的 connection

====
[source,java]
----
@GrpcService<1>
public class MyServiceGrpcImpl extends MyServiceGrpc.MyServiceImplBase {

    @Autowired
    private RestTemplate restTemplate;

    @Override
    public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {

        String build = "";
        try {
            build = JsonFormat.printer().print(request);<2>
        } catch (InvalidProtocolBufferException e) {
        }

        JSONObject helloReplyMo = restTemplate.postForObject("http://localhost:9920/test", JSON.parseObject(build), JSONObject.class);<3>

        HelloReply.Builder builder = HelloReply.newBuilder();
        try {
            JsonFormat.parser().merge(helloReplyMo.toJSONString(), builder);<4>
        } catch (InvalidProtocolBufferException e) {
        }

        responseObserver.onNext(builder.build());
        responseObserver.onCompleted();
    }
}
----
<1> @GrpcService帮助我们建立服务,其服务端口配置在yml中
<2> 将请求,转换为json
<3> 通过http + json格式请求我们web端口
<4> 解析json结果,转换为proto
====

icon:tags[role="red"] 定义合适的 server

[source,java]
----
@RestController
public class GrpcServerController {

    @PostMapping("/test")
    public HelloReplyMo test(@RequestBody HelloRequestMo helloRequest) {
        HelloReplyMo helloReplyMo = new HelloReplyMo();
        helloReplyMo.setMessage(helloRequest.getName() + "response");
        return helloReplyMo;
    }
}
----